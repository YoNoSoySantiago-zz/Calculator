import java.util.Scanner;
     public class calculator{
		 // operaciones con dos valores
		 public static double Operation2(int operation, double num1, double num2){
			 double result;
			 switch (operation){
				 case 1: result = suma(num1,num2);
				 break;
				 case 2: result = suma(num1,num2);
			     break;
                 case 3:
				 break;
			     case

				 
			

}		 
		 
		 
		 public static void main(String[] args){
			 char operation;
			 double num1,num2,result;
			 String = "desea continuar?"
			 Scanner S = new Scanner(System.in);
			 System.out.println("La calculadora se inisializo en modo Normal, para cambiar de modo presiona # despues de el resultado");
			 System.out.println("escoja la operacion a realizar \n"+
			 "A. Obciones avanzadas \n"+
			 "1. Suma \n"+
			 "2. resta \n"+
			 "3. multiplicacion \n"+
			 "4. division \n"+
			 "5. modulo \n"+
			 "6. seno \n"+
			 "7. coseno \n"+
			 "8. tangente \n"+
			 "9. Logaritmo base 10 y base n \n"+
			 "10. Raiz cuadrada \n"
			 "11. raiz n-enesima \n"+
			 "12. potenciacion \n"+
			 "13. base 10 de un numero x \n"+
			 "14. Memoria de los resultados de las ultimas 10 operaciones \n"+
			 "15. El factorial de un numero \n"+
			 "16. La conversion de grados a radianes y viseversa \n"+
			 "17. La conversion entre binarios, decimales y hexadecimales \n" +
			 "F. Apagar la calculadora");
			 do{
			 operacion = S.nextChar();
			 
			     if(operation == 'A'){
					 System.out.println("#. Cambiar de Modo \n"+
					 "A. Volver al menu \n"+
					 "B. Sistema binomial \n"+
					 "C. Sistema Decimal \n"+
					 "D. Sistema Hexadecimal \n"+
					 "E. Numero de Euler \n"+
					 "Pi. Numero Pi (Ï€) ");
					 
				 }else if(operation != 'F'){
					operation = Integer.parseInt(operacion);
					if(operation <= 5 || operation == 9 || operation == 11 || operation == 12){
						result = operation1(int operation);
					}else{
					result=trygonometriOperation(int operation);
					}
					
				 }
				 
		System.out.println("= "+result);
			 }while(operation != F);
		 }
		
	
	 }
	 }
	 public class Operation2{
		 /**
		  <p> des: <p> recibe dos numeros en formato decimal, este metodo permite sumar dos numeros y devolver su resultado
		  @Param num1, este parametro representa un numero 
		  @Param num2, este parametro representa un nemero 
		  @return este metodo retorna la suma de los parametros
		 */
		 public static double suma(double num1,double num2){
				 
			 double result;
			 result += num1 + num2;
			 return result;
		 }
		 /**
		  <p> des: <p> recibe dos numeros en formato decimal, este metodo permite restar dos numeros y devolver su resultado
		  @Param num1, este parametro representa un numero 
		  @Param num2, este parametro representa un nemero 
		  @return este metodo retorna la resta de los parametros
		  */ 
		 public static double resta(double num1,double num2){
			 double result;
			 result += num1 - num2;
			 return result;
		 }
		 /**
		  <p> des: <p> recibe dos numeros en formato decimal, este metodo permite multiplicar dos numeros y devolver su resultado
		  @Param num1, este parametro representa un numero 
		  @Param num2, este parametro representa un nemero 
		  @return este metodo retorna la multiplicacion de los parametros
		  */
		 public static double multiplicacion(double num1,double num2){
			 double result;
			 result += num1 * num2;
			 return result;
		 }
		 /**
		  <p> des: <p> recibe dos numeros en formato decimal, este metodo permite dividir dos numeros y devolver su resultado
		  @Param num1, este parametro representa un numero 
		  @Param num2, este parametro representa un nemero 
		  @return este metodo retorna la division de los parametros
		  */
		 public static double division(double num1,double num2){
			 double result;
			 result += num1 / num2;
			 return result;
		 }
		 /**
		  <p> des: <p> recibe dos numeros en formato decimal, este metodo permite encontrar el modulo(residuo) de dos numeros.
		  @Param num1, este parametro representa un numero 
		  @Param num2, este parametro representa un nemero
		  @return este metodo retorna el modulo de la division entre el parametro 1 el parametro 2
		  
		  */
		 public static double modulo(double num1,double num2){
			 double result;
			 result += num1 % num2;
			 return result;
		 }
		 /**
		  <p> des: <p> recibe dos numeros en formato decimal, este metodo permite econtrar el logaritmo de cualquier base de un numero utilizando 
		  el metodo logBase10 para hacerlo
		  @Param num1, este parametro representa un numero entero  al cual se le sacara el logaritmo
		  @Param base, este parametro representa un nemero entero que representa la base del logaritmo  
		  @return este metodo retorna un numero entero que representa el logaritmo entero de  base N de un numero
		  */
		 public static double logBaseN(double num1, int base){
			 double result;
			
			result = (Operation1.logBase10(num1) / Operation1.logBase10(base));
			 
			 return result;
		 }
		 /**
		 <p> des: <p> Recibe dos numeros, este metodo permite sacar la raiz N del primer cualquier numero utilizando la igualdad de la potenciacion
		 @Param num1, este parametro representa un numero decimal al cual se le sacara la raiz
		 @Param n, este parametro representa un numero entero positivo el cual sera la raiz del  parametro num1
		 @return este metodo retorna un numero decimal que representa 
		 */
		 public static double raizN(double num1, int n){
			 double result;
			 Math.pow(num1,((double)1/n));
			 return result;
		 }
		 /**
		 <p> des: <p> Recibe dos numeros uno decimal y otro entero, este metodo permite sacar cualquier potencia entera positiva de un numero
		 @Param num1, este parametro representa un numero decimal el cual se le sacara la potencia 
		 @Param n, este parametro representa un numero entero positivo al cual sera elevado el parametro num1
		 @return este numero devuelve la potencia decimal del parametro num1 elvado al parametro n
		 */
		 public static double potenciaN(double num1, int n){
			 double result = 1;
			 for(int i = 1;i < n;i++){
				 num1 += num1*nm1;
				 result = num1;
			 } 
			 
			 return result;
		 }
	 }
	 
	 public class Operation1{
		 // sucesion de Tylor
		 /**
		 <p> des:<p> recibe un numero decimal, este metodo permite calcular el seno de un numero utilizando la sucesion de Tylor 
	     <p> pre: <p> Los metodos potenciaN y factorial ya deben funcionar con cualquier numero real
		 @Param num1, numero decimal en formato Haxadecimal al cual se le sacara el seno correspondiente
		 @return este metodo retorna un numero decimal que representa al seno del parametro num1
		 */
		 public static double seno(double num1){
			 double result = 0;
			 for(int i = 0;i < 5; i++){
				 result += (Operation2.potenciaN(num1,(2*i + 1)))/factorial(2*i + 1);
			 }
			 return result;
		 }
		 // identidad Trygonometrica
		 /**
		 <p> des <p> Recibe un numero decimal en formato hexadecimal, este metodo permite encontrar el coseno de un numero
		 @Param num1 este parametro representa un numero decimal
		 @return este metodo retorna un numero decimal que representa el valor del coseno de un numero
		 */
		 public static double coseno(double num1){
		 double result;
			 num1 = 1 - (seno(num1)*seno(num1));
				 
				 result = raiz(num1);
				 return result;	 
			 }
			 public static double tangente(double num1){
				 double result;
				 result = seno(num1)/coseno(num1);
				 return result;
			 }
			 //formula de Newton
			 public static double raiz(double num1){
				 double result;
				 result = 1;
				 for(int i;i < 25;i++){
					 result=result-((result*result-num1)/(2*result));
				 }
				 return result;
			 }// no entender
			 public static double base10(double num1){
				 double result;
			 }
			 public static double factorial(int num1){
				 double result = 1;
				 while ( num1!=0) {
                     result=reult*num1;
                     num1--;
					 }
			 } 
			 public static int logBase10(int num1){
				 int result;
				 for(i = 1;num1 >= 10; i++){
					 num1 = num1/10;
					 result = i;
				 }
				 return result;
			 }
	 }
	 
		 
		 
		 